{"version":3,"sources":["Name.js","Generator.js","Feeder.js","App.js","serviceWorker.js","index.js"],"names":["Name","props","icon","name","canon","color","Segment","Icon","Generator","React","useState","names","setNames","quality","setQuality","waiting","setWaiting","generateNames","fetch","then","res","json","error","statusCode","message","err","console","log","useEffect","Input","label","placeholder","defaultValue","onInput","e","target","value","Button","labelPosition","floated","loading","onClick","Divider","map","index","key","Feeder","input","setInput","password","setPassword","setLabel","className","action","content","method","headers","body","JSON","stringify","text","response","status","Label","pointing","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f871d8ae.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon, Segment } from 'semantic-ui-react'\n\nfunction Name(props) {\n\n  let icon = props.name.canon ? 'recycle' : 'thumbs up';\n  let color = props.name.canon ? 'red' : 'teal';\n\n  return (\n    <Segment>\n        <Icon name={ icon } color={ color } />\n        { props.name.name }\n    </Segment>\n  );\n}\n\nexport default Name;\n","import React from 'react';\nimport { Input, Segment, Icon, Button, Divider } from 'semantic-ui-react'\nimport Name from './Name'\n\nfunction Generator() {\n\n  const [names, setNames] = React.useState([]);\n  const [quality, setQuality] = React.useState(4);\n  const [waiting, setWaiting] = React.useState(false);\n\n  let generateNames = () => {\n    setWaiting(true)\n    fetch('http://localhost:3001/suggestions?quality=' + quality)\n    .then(res => res.json())\n    .then((res) => {\n        if (res.error) {\n            setNames(\n                [\n                    { name: 'Oopsie woopsie! Die Server hat eine fucky wucky!', canon: true },\n                    { name: '' + res.error.statusCode + ' ' + res.error.message, canon: true}\n                ] \n            )\n        } else {\n            setNames(res)\n        }\n        setWaiting(false)\n    }, (err) => {\n        console.log(\"error\", err)\n        setWaiting(false)\n    })\n  }\n\n  React.useEffect(() => {\n    generateNames();\n  }, [])\n\n  return (\n    <Segment>\n        <h2>Gernreatorz</h2>\n        <Input label='Quality (1-10)' placeholder='Quailty--- enter here' defaultValue='4' onInput={e => setQuality(e.target.value)}/>\n        {waiting ? (\n            <Button icon labelPosition='right' color='teal' floated='right' loading>\n                <Icon name='shop' />\n                Generate\n            </Button>\n        ) : (\n            <Button icon labelPosition='right' color='teal' floated='right' onClick={generateNames}>\n                <Icon name='shop' />\n                Generate\n            </Button>\n        ) }\n        <Divider />\n        {\n            names.map((name, index) => {\n                return (<Name name={name} key={index} />)\n            })\n        }\n    </Segment>\n  );\n}\n\nexport default Generator;\n","import React from 'react';\nimport { Input, Segment, Label } from 'semantic-ui-react'\n\nfunction Feeder() {\n  const [input, setInput] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [waiting, setWaiting] = React.useState(false)\n  const [label, setLabel] = React.useState('')\n\n  const feedTheGenerator = () => {\n      setWaiting(true)\n      fetch('http://localhost:3001/sources?password=' + password, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ text: input})\n      }).then((response) => {\n        console.log(response)\n        if (response.status !== 200) {\n            setLabel('Didnt like ' + input + '...')\n        } else {\n            setLabel('Thanks for ' + input + '!')\n        }\n        setInput('')\n        setWaiting(false)\n      })\n  }\n\n  return (\n    <Segment>\n        <h2>Feed a him</h2>\n        <Input placeholder='Fatal1ty' className='feed' onInput={e => setInput(e.target.value)} value={input}/>\n        <Input\n            action={{\n                color: 'red',\n                labelPosition: 'right',\n                icon: 'eye',\n                content: 'Feed',\n                onClick: () => feedTheGenerator(),\n                loading: waiting\n            }}\n            defaultValue=''\n            placeholder='passowrd'\n            onInput={e => setPassword(e.target.value)}\n        />\n        { label === '' ? '' : (\n            <Label pointing='left'>{ label }</Label>\n            )\n        }\n    </Segment>\n  );\n}\n\nexport default Feeder;\n","import React from 'react';\nimport { Segment } from 'semantic-ui-react'\n\nimport Generator from './Generator'\nimport Feeder from './Feeder'\n\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Segment><h1>CSGO Name Generator III</h1></Segment>\n      <Generator></Generator>\n      <Feeder></Feeder>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}